
==================== FINAL INTERFACE ====================
2016-10-30 01:49:09.674484 UTC

interface goodg_7yTcpPp20HH7TrsrNkfgsn:PatternCompiler 7103
  interface hash: a234bc2d631d4e372be2a17c140b97e7
  ABI hash: e0d3a6e5343a3af0764473ef3303a071
  export-list hash: 42ab6d0472f38de3d1fe6285391d435b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a15922da834f2f01f7a0695d98ce9660
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parsers.<**
  Parsers.echo
  PatternCompiler.compile
  PatternCompiler.compile'
  PatternCompiler.token
  PatternCompiler.tokenize
  PatternCompiler.PInput{PatternCompiler.S PatternCompiler.Star}
  PatternCompiler.Pattern
  PatternCompiler.Token{PatternCompiler.Hole PatternCompiler.Opt PatternCompiler.Or PatternCompiler.Word}
module dependencies: Parsers
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.2@attop_F2JR8EcnzjH8eSBi5YocsE* base-4.8.2.0*
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      scientific-0.3.4.9@scien_1WVNjGUftkQ9QzH4DOM2n1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne*
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: attoparsec-0.13.0.2@attop_F2JR8EcnzjH8eSBi5YocsE:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.0.2@attop_F2JR8EcnzjH8eSBi5YocsE:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
import  -/  attoparsec-0.13.0.2@attop_F2JR8EcnzjH8eSBi5YocsE:Data.Attoparsec.Text ef4522f4be13d2408762e9077e71bbfa
import  -/  attoparsec-0.13.0.2@attop_F2JR8EcnzjH8eSBi5YocsE:Data.Attoparsec.Text.Internal 09cec9d6277802eed6513b06f40a903e
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Parsers 619f8c136d77b0de416587332ff6b144
  exports: 61b04e9cda02b57fb5b43b9629112fba
  <** 4a6ab45fe463bf987b14ea01294a3193
  <+> 151005781fdd0af4f6b5f7b893d8ebc8
  <||> bd4cac8e4265cf4caf69de14be30f3cb
  anyWord 7fad749842ac167f0304c24649c780ba
  echo f8aee999bb699cf4f4a30ff69ed80013
  opt 5f60c2ebc226173968e4978af0b110f0
  pzero 1cc6f5e132ca1d3bcc021354218410d3
  word 5d800484aa251b3ca6a4ddfe37a41935
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text b53ae191632883b10562be5cbaa0b22b
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
f1ccc551297aa88d64ce873657e71a38
  $fEqPInput :: GHC.Classes.Eq PatternCompiler.PInput
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PatternCompiler.PInput
                  PatternCompiler.$fEqPInput_$c==
                  PatternCompiler.$fEqPInput_$c/= -}
f1ccc551297aa88d64ce873657e71a38
  $fEqPInput_$c/= ::
    PatternCompiler.PInput -> PatternCompiler.PInput -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: PatternCompiler.PInput
                   b :: PatternCompiler.PInput ->
                 case a of wild {
                   PatternCompiler.S a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PatternCompiler.S b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   PatternCompiler.Star
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PatternCompiler.Star -> GHC.Types.False }
                   PatternCompiler.Nil
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PatternCompiler.Nil -> GHC.Types.False } }) -}
f1ccc551297aa88d64ce873657e71a38
  $fEqPInput_$c== ::
    PatternCompiler.PInput -> PatternCompiler.PInput -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: PatternCompiler.PInput
                   ds1 :: PatternCompiler.PInput ->
                 case ds of wild {
                   PatternCompiler.S a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PatternCompiler.S b1 -> GHC.Base.eqString a1 b1 }
                   PatternCompiler.Star
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PatternCompiler.Star -> GHC.Types.True }
                   PatternCompiler.Nil
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PatternCompiler.Nil -> GHC.Types.True } }) -}
5127f9b2fe75859435ff29ee8446f81e
  $fEqToken :: GHC.Classes.Eq PatternCompiler.Token
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PatternCompiler.Token
                  PatternCompiler.$fEqToken_$c==
                  PatternCompiler.$fEqToken_$c/= -}
5127f9b2fe75859435ff29ee8446f81e
  $fEqToken_$c/= ::
    PatternCompiler.Token -> PatternCompiler.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: PatternCompiler.Token b :: PatternCompiler.Token ->
                 case PatternCompiler.$fEqToken_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5127f9b2fe75859435ff29ee8446f81e
  $fEqToken_$c== ::
    PatternCompiler.Token -> PatternCompiler.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f1ccc551297aa88d64ce873657e71a38
  $fShowPInput :: GHC.Show.Show PatternCompiler.PInput
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PatternCompiler.PInput
                  PatternCompiler.$fShowPInput_$cshowsPrec
                  PatternCompiler.$fShowPInput_$cshow
                  PatternCompiler.$fShowPInput_$cshowList -}
f1ccc551297aa88d64ce873657e71a38
  $fShowPInput1 :: PatternCompiler.PInput -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (PatternCompiler.$fShowPInput_$cshowsPrec
                   PatternCompiler.$fShowPInput2) -}
197d2ecf6dcc3d4969f181ce6f01cd8e
  $fShowPInput2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
15d977b94ab625669bdd116ecee4a1b8
  $fShowPInput3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nil"#) -}
8fd506795f8c6f7192e2a2f3ae756bb2
  $fShowPInput4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Star"#) -}
39bc557c176d02122a23f7806fe4927c
  $fShowPInput5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "S "#) -}
f1ccc551297aa88d64ce873657e71a38
  $fShowPInput_$cshow :: PatternCompiler.PInput -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: PatternCompiler.PInput ->
                 PatternCompiler.$fShowPInput_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f1ccc551297aa88d64ce873657e71a38
  $fShowPInput_$cshowList ::
    [PatternCompiler.PInput] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PatternCompiler.PInput
                   PatternCompiler.$fShowPInput1) -}
f1ccc551297aa88d64ce873657e71a38
  $fShowPInput_$cshowsPrec ::
    GHC.Types.Int -> PatternCompiler.PInput -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ a :: GHC.Types.Int
                   ds :: PatternCompiler.PInput
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   PatternCompiler.S b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             PatternCompiler.$fShowPInput5
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                PatternCompiler.$fShowPInput5
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))))) } }
                   PatternCompiler.Star
                   -> GHC.Base.++ @ GHC.Types.Char PatternCompiler.$fShowPInput4 eta
                   PatternCompiler.Nil
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        PatternCompiler.$fShowPInput3
                        eta }) -}
5127f9b2fe75859435ff29ee8446f81e
  $fShowToken :: GHC.Show.Show PatternCompiler.Token
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PatternCompiler.Token
                  PatternCompiler.$fShowToken_$cshowsPrec
                  PatternCompiler.$fShowToken_$cshow
                  PatternCompiler.$fShowToken_$cshowList -}
5127f9b2fe75859435ff29ee8446f81e
  $fShowToken1 :: PatternCompiler.Token -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (PatternCompiler.$fShowToken_$cshowsPrec
                   PatternCompiler.$fShowPInput2) -}
5127f9b2fe75859435ff29ee8446f81e
  $fShowToken_$cshow :: PatternCompiler.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: PatternCompiler.Token ->
                 PatternCompiler.$fShowToken_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5127f9b2fe75859435ff29ee8446f81e
  $fShowToken_$cshowList :: [PatternCompiler.Token] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PatternCompiler.Token
                   PatternCompiler.$fShowToken1) -}
5127f9b2fe75859435ff29ee8446f81e
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int -> PatternCompiler.Token -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
f1ccc551297aa88d64ce873657e71a38
  data PInput = S GHC.Base.String | Star | Nil
86a8a08507814e90542c2d64387a5184
  type Pattern =
    PatternCompiler.PInput
    -> PatternCompiler.PInput
    -> Data.Attoparsec.Text.Internal.Parser Data.Text.Internal.Text
5127f9b2fe75859435ff29ee8446f81e
  data Token
    = Word GHC.Base.String
    | Hole
    | Opt PatternCompiler.Token
    | Or PatternCompiler.Token PatternCompiler.Token
6679e83c5252deb7006ae438cd1a515f
  compile :: GHC.Base.String -> PatternCompiler.Pattern
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ x :: GHC.Base.String ->
                 let {
                   ts :: [PatternCompiler.Token]
                   = PatternCompiler.compile_go (PatternCompiler.compile1 x)
                 } in
                 \ u :: PatternCompiler.PInput v :: PatternCompiler.PInput ->
                 PatternCompiler.fill
                   (GHC.Types.:
                      @ PatternCompiler.PInput
                      u
                      (GHC.Types.:
                         @ PatternCompiler.PInput
                         v
                         (GHC.Types.[] @ PatternCompiler.PInput)))
                   ts) -}
58d52ebf96960186e3063a792defa10b
  compile' ::
    GHC.Base.String
    -> Data.Attoparsec.Text.Internal.Parser Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ xs :: GHC.Base.String ->
                 PatternCompiler.fill
                   (GHC.Types.:
                      @ PatternCompiler.PInput
                      PatternCompiler.Nil
                      (GHC.Types.:
                         @ PatternCompiler.PInput
                         PatternCompiler.Nil
                         (GHC.Types.[] @ PatternCompiler.PInput)))
                   (PatternCompiler.tokenize xs)) -}
1985f6508adbaa5f3a0a918c6c647531
  compile1 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   PatternCompiler.compile2) -}
2408737307a426c22131f9f179b9cc4b
  compile2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
c72bbff6b5045a9fbc27cac24877153e
  compile_go :: [[GHC.Types.Char]] -> [PatternCompiler.Token]
  {- Arity: 1, Strictness: <S,1*U> -}
49f341e84dc6feed8ea9883c4f172bef
  fill ::
    [PatternCompiler.PInput]
    -> [PatternCompiler.Token]
    -> Data.Attoparsec.Text.Internal.Parser Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,U><S,U> -}
39faf47d7e0d0b1479f14afef3948443
  token :: GHC.Base.String -> PatternCompiler.Token
  {- Arity: 1, Strictness: <S,U> -}
65a9e40173c95a6c9c35fceaac4feb1c
  tokenize :: GHC.Base.String -> [PatternCompiler.Token]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ x :: GHC.Base.String ->
                 PatternCompiler.compile_go (PatternCompiler.compile1 x)) -}
instance GHC.Classes.Eq [PatternCompiler.PInput]
  = PatternCompiler.$fEqPInput
instance GHC.Classes.Eq [PatternCompiler.Token]
  = PatternCompiler.$fEqToken
instance GHC.Show.Show [PatternCompiler.PInput]
  = PatternCompiler.$fShowPInput
instance GHC.Show.Show [PatternCompiler.Token]
  = PatternCompiler.$fShowToken
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

